{-# LANGUAGE UnboxedTuples         #-}
{-# LANGUAGE MagicHash             #-}
{-# LANGUAGE TypeFamilies          #-}
{-# LANGUAGE DeriveDataTypeable    #-}
{-# LANGUAGE BangPatterns          #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE CPP                   #-}

module Data.Primitive.SIMD.Int8X64 (Int8X64) where

-- This code was AUTOMATICALLY generated, DO NOT EDIT!

import Data.Primitive.SIMD.Class

import GHC.Int

import GHC.Types
import GHC.Exts
import GHC.ST

import Foreign.Storable

import Control.Monad.Primitive

import Data.Primitive.Types
import Data.Primitive.ByteArray
import Data.Primitive.Addr
import Data.Monoid
import Data.Typeable

import qualified Data.Vector.Primitive as PV
import qualified Data.Vector.Primitive.Mutable as PMV
import Data.Vector.Unboxed (Unbox)
import qualified Data.Vector.Unboxed as UV
import Data.Vector.Generic (Vector(..))
import Data.Vector.Generic.Mutable (MVector(..))

-- ** Int8X64
data Int8X64 = Int8X64 Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# Int# deriving Typeable

broadcastInt8# :: Int# -> Int#
broadcastInt8# v = v

packInt8# :: (# Int# #) -> Int#
packInt8# (# v #) = v

unpackInt8# :: Int# -> (# Int# #)
unpackInt8# v = (# v #)

insertInt8# :: Int# -> Int# -> Int# -> Int#
insertInt8# _ v _ = v

negateInt8# :: Int# -> Int#
negateInt8# a = case negate (I8# a) of I8# b -> b

plusInt8# :: Int# -> Int# -> Int#
plusInt8# a b = case I8# a + I8# b of I8# c -> c

minusInt8# :: Int# -> Int# -> Int#
minusInt8# a b = case I8# a - I8# b of I8# c -> c

timesInt8# :: Int# -> Int# -> Int#
timesInt8# a b = case I8# a * I8# b of I8# c -> c

quotInt8# :: Int# -> Int# -> Int#
quotInt8# a b = case I8# a `quot` I8# b of I8# c -> c

remInt8# :: Int# -> Int# -> Int#
remInt8# a b = case I8# a `rem` I8# b of I8# c -> c

abs' :: Int8 -> Int8
abs' (I8# x) = I8# (abs# x)

{-# NOINLINE abs# #-}
abs# :: Int# -> Int#
abs# x = case abs (I8# x) of
    I8# y -> y

signum' :: Int8 -> Int8
signum' (I8# x) = I8# (signum# x)

{-# NOINLINE signum# #-}
signum# :: Int# -> Int#
signum# x = case signum (I8# x) of
    I8# y -> y

instance Eq Int8X64 where
    a == b = case unpackInt8X64 a of
        Tuple64 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45 x46 x47 x48 x49 x50 x51 x52 x53 x54 x55 x56 x57 x58 x59 x60 x61 x62 x63 x64 -> case unpackInt8X64 b of
            Tuple64 y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15 y16 y17 y18 y19 y20 y21 y22 y23 y24 y25 y26 y27 y28 y29 y30 y31 y32 y33 y34 y35 y36 y37 y38 y39 y40 y41 y42 y43 y44 y45 y46 y47 y48 y49 y50 y51 y52 y53 y54 y55 y56 y57 y58 y59 y60 y61 y62 y63 y64 -> x1 == y1 && x2 == y2 && x3 == y3 && x4 == y4 && x5 == y5 && x6 == y6 && x7 == y7 && x8 == y8 && x9 == y9 && x10 == y10 && x11 == y11 && x12 == y12 && x13 == y13 && x14 == y14 && x15 == y15 && x16 == y16 && x17 == y17 && x18 == y18 && x19 == y19 && x20 == y20 && x21 == y21 && x22 == y22 && x23 == y23 && x24 == y24 && x25 == y25 && x26 == y26 && x27 == y27 && x28 == y28 && x29 == y29 && x30 == y30 && x31 == y31 && x32 == y32 && x33 == y33 && x34 == y34 && x35 == y35 && x36 == y36 && x37 == y37 && x38 == y38 && x39 == y39 && x40 == y40 && x41 == y41 && x42 == y42 && x43 == y43 && x44 == y44 && x45 == y45 && x46 == y46 && x47 == y47 && x48 == y48 && x49 == y49 && x50 == y50 && x51 == y51 && x52 == y52 && x53 == y53 && x54 == y54 && x55 == y55 && x56 == y56 && x57 == y57 && x58 == y58 && x59 == y59 && x60 == y60 && x61 == y61 && x62 == y62 && x63 == y63 && x64 == y64

instance Ord Int8X64 where
    a `compare` b = case unpackInt8X64 a of
        Tuple64 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45 x46 x47 x48 x49 x50 x51 x52 x53 x54 x55 x56 x57 x58 x59 x60 x61 x62 x63 x64 -> case unpackInt8X64 b of
            Tuple64 y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15 y16 y17 y18 y19 y20 y21 y22 y23 y24 y25 y26 y27 y28 y29 y30 y31 y32 y33 y34 y35 y36 y37 y38 y39 y40 y41 y42 y43 y44 y45 y46 y47 y48 y49 y50 y51 y52 y53 y54 y55 y56 y57 y58 y59 y60 y61 y62 y63 y64 -> x1 `compare` y1 <> x2 `compare` y2 <> x3 `compare` y3 <> x4 `compare` y4 <> x5 `compare` y5 <> x6 `compare` y6 <> x7 `compare` y7 <> x8 `compare` y8 <> x9 `compare` y9 <> x10 `compare` y10 <> x11 `compare` y11 <> x12 `compare` y12 <> x13 `compare` y13 <> x14 `compare` y14 <> x15 `compare` y15 <> x16 `compare` y16 <> x17 `compare` y17 <> x18 `compare` y18 <> x19 `compare` y19 <> x20 `compare` y20 <> x21 `compare` y21 <> x22 `compare` y22 <> x23 `compare` y23 <> x24 `compare` y24 <> x25 `compare` y25 <> x26 `compare` y26 <> x27 `compare` y27 <> x28 `compare` y28 <> x29 `compare` y29 <> x30 `compare` y30 <> x31 `compare` y31 <> x32 `compare` y32 <> x33 `compare` y33 <> x34 `compare` y34 <> x35 `compare` y35 <> x36 `compare` y36 <> x37 `compare` y37 <> x38 `compare` y38 <> x39 `compare` y39 <> x40 `compare` y40 <> x41 `compare` y41 <> x42 `compare` y42 <> x43 `compare` y43 <> x44 `compare` y44 <> x45 `compare` y45 <> x46 `compare` y46 <> x47 `compare` y47 <> x48 `compare` y48 <> x49 `compare` y49 <> x50 `compare` y50 <> x51 `compare` y51 <> x52 `compare` y52 <> x53 `compare` y53 <> x54 `compare` y54 <> x55 `compare` y55 <> x56 `compare` y56 <> x57 `compare` y57 <> x58 `compare` y58 <> x59 `compare` y59 <> x60 `compare` y60 <> x61 `compare` y61 <> x62 `compare` y62 <> x63 `compare` y63 <> x64 `compare` y64

instance Show Int8X64 where
    showsPrec _ a s = case unpackInt8X64 a of
        Tuple64 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45 x46 x47 x48 x49 x50 x51 x52 x53 x54 x55 x56 x57 x58 x59 x60 x61 x62 x63 x64 -> "Int8X64 (" ++ shows x1 (", " ++ shows x2 (", " ++ shows x3 (", " ++ shows x4 (", " ++ shows x5 (", " ++ shows x6 (", " ++ shows x7 (", " ++ shows x8 (", " ++ shows x9 (", " ++ shows x10 (", " ++ shows x11 (", " ++ shows x12 (", " ++ shows x13 (", " ++ shows x14 (", " ++ shows x15 (", " ++ shows x16 (", " ++ shows x17 (", " ++ shows x18 (", " ++ shows x19 (", " ++ shows x20 (", " ++ shows x21 (", " ++ shows x22 (", " ++ shows x23 (", " ++ shows x24 (", " ++ shows x25 (", " ++ shows x26 (", " ++ shows x27 (", " ++ shows x28 (", " ++ shows x29 (", " ++ shows x30 (", " ++ shows x31 (", " ++ shows x32 (", " ++ shows x33 (", " ++ shows x34 (", " ++ shows x35 (", " ++ shows x36 (", " ++ shows x37 (", " ++ shows x38 (", " ++ shows x39 (", " ++ shows x40 (", " ++ shows x41 (", " ++ shows x42 (", " ++ shows x43 (", " ++ shows x44 (", " ++ shows x45 (", " ++ shows x46 (", " ++ shows x47 (", " ++ shows x48 (", " ++ shows x49 (", " ++ shows x50 (", " ++ shows x51 (", " ++ shows x52 (", " ++ shows x53 (", " ++ shows x54 (", " ++ shows x55 (", " ++ shows x56 (", " ++ shows x57 (", " ++ shows x58 (", " ++ shows x59 (", " ++ shows x60 (", " ++ shows x61 (", " ++ shows x62 (", " ++ shows x63 (", " ++ shows x64 (")" ++ s))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

instance Num Int8X64 where
    (+) = plusInt8X64
    (-) = minusInt8X64
    (*) = timesInt8X64
    negate = negateInt8X64
    abs    = mapVector abs'
    signum = mapVector signum'
    fromInteger = broadcastVector . fromInteger

instance Bounded Int8X64 where
    minBound = broadcastVector minBound
    maxBound = broadcastVector maxBound

instance Storable Int8X64 where
    sizeOf x     = vectorSize x * elementSize x
    alignment    = sizeOf
    peek (Ptr a) = readOffAddr (Addr a) 0
    poke (Ptr a) = writeOffAddr (Addr a) 0

instance SIMDVector Int8X64 where
    type Elem Int8X64 = Int8
    type ElemTuple Int8X64 = Tuple64 Int8
    nullVector         = broadcastVector 0
    vectorSize  _      = 64
    elementSize _      = 1
    broadcastVector    = broadcastInt8X64
    generateVector     = generateInt8X64
    unsafeInsertVector = unsafeInsertInt8X64
    packVector         = packInt8X64
    unpackVector       = unpackInt8X64
    mapVector          = mapInt8X64
    zipVector          = zipInt8X64
    foldVector         = foldInt8X64

instance SIMDIntVector Int8X64 where
    quotVector = quotInt8X64
    remVector  = remInt8X64

instance Prim Int8X64 where
    sizeOf# a                   = let !(I# x) = sizeOf a in x
    alignment# a                = let !(I# x) = alignment a in x
    indexByteArray# ba i        = indexInt8X64Array (ByteArray ba) (I# i)
    readByteArray# mba i s      = let (ST r) = readInt8X64Array (MutableByteArray mba) (I# i) in r s
    writeByteArray# mba i v s   = let (ST r) = writeInt8X64Array (MutableByteArray mba) (I# i) v in case r s of { (# s', _ #) -> s' }
    setByteArray# mba off n v s = let (ST r) = setByteArrayGeneric (MutableByteArray mba) (I# off) (I# n) v in case r s of { (# s', _ #) -> s' }
    indexOffAddr# addr i        = indexInt8X64OffAddr (Addr addr) (I# i)
    readOffAddr# addr i s       = let (ST r) = readInt8X64OffAddr (Addr addr) (I# i) in r s
    writeOffAddr# addr i v s    = let (ST r) = writeInt8X64OffAddr (Addr addr) (I# i) v in case r s of { (# s', _ #) -> s' }
    setOffAddr# addr off n v s  = let (ST r) = setOffAddrGeneric (Addr addr) (I# off) (I# n) v in case r s of { (# s', _ #) -> s' }

newtype instance UV.Vector Int8X64 = V_Int8X64 (PV.Vector Int8X64)
newtype instance UV.MVector s Int8X64 = MV_Int8X64 (PMV.MVector s Int8X64)

instance Vector UV.Vector Int8X64 where
    basicUnsafeFreeze (MV_Int8X64 v) = V_Int8X64 <$> PV.unsafeFreeze v
    basicUnsafeThaw (V_Int8X64 v) = MV_Int8X64 <$> PV.unsafeThaw v
    basicLength (V_Int8X64 v) = PV.length v
    basicUnsafeSlice start len (V_Int8X64 v) = V_Int8X64(PV.unsafeSlice start len v)
    basicUnsafeIndexM (V_Int8X64 v) = PV.unsafeIndexM v
    basicUnsafeCopy (MV_Int8X64 m) (V_Int8X64 v) = PV.unsafeCopy m v
    elemseq _ = seq
    {-# INLINE basicUnsafeFreeze #-}
    {-# INLINE basicUnsafeThaw #-}
    {-# INLINE basicLength #-}
    {-# INLINE basicUnsafeSlice #-}
    {-# INLINE basicUnsafeIndexM #-}
    {-# INLINE basicUnsafeCopy #-}
    {-# INLINE elemseq #-}

instance MVector UV.MVector Int8X64 where
    basicLength (MV_Int8X64 v) = PMV.length v
    basicUnsafeSlice start len (MV_Int8X64 v) = MV_Int8X64(PMV.unsafeSlice start len v)
    basicOverlaps (MV_Int8X64 v) (MV_Int8X64 w) = PMV.overlaps v w
    basicUnsafeNew len = MV_Int8X64 <$> PMV.unsafeNew len
#if MIN_VERSION_vector(0,11,0)
    basicInitialize (MV_Int8X64 v) = basicInitialize v
#endif
    basicUnsafeRead (MV_Int8X64 v) = PMV.unsafeRead v
    basicUnsafeWrite (MV_Int8X64 v) = PMV.unsafeWrite v
    {-# INLINE basicLength #-}
    {-# INLINE basicUnsafeSlice #-}
    {-# INLINE basicOverlaps #-}
    {-# INLINE basicUnsafeNew #-}
    {-# INLINE basicUnsafeRead #-}
    {-# INLINE basicUnsafeWrite #-}

instance Unbox Int8X64

{-# INLINE broadcastInt8X64 #-}
-- | Broadcast a scalar to all elements of a vector.
broadcastInt8X64 :: Int8 -> Int8X64
broadcastInt8X64 (I8# x) = case broadcastInt8# x of
    v -> Int8X64 v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v v

{-# INLINE[1] generateInt8X64 #-}
-- | Apply a function to each element of a vector (unpacks and repacks the vector)
generateInt8X64 :: (Int -> Int8) -> Int8X64
generateInt8X64 f = packInt8X64 (Tuple64 (f 0) (f 1) (f 2) (f 3) (f 4) (f 5) (f 6) (f 7) (f 8) (f 9) (f 10) (f 11) (f 12) (f 13) (f 14) (f 15) (f 16) (f 17) (f 18) (f 19) (f 20) (f 21) (f 22) (f 23) (f 24) (f 25) (f 26) (f 27) (f 28) (f 29) (f 30) (f 31) (f 32) (f 33) (f 34) (f 35) (f 36) (f 37) (f 38) (f 39) (f 40) (f 41) (f 42) (f 43) (f 44) (f 45) (f 46) (f 47) (f 48) (f 49) (f 50) (f 51) (f 52) (f 53) (f 54) (f 55) (f 56) (f 57) (f 58) (f 59) (f 60) (f 61) (f 62) (f 63))

{-# INLINE packInt8X64 #-}
-- | Pack the elements of a tuple into a vector.
packInt8X64 :: Tuple64 Int8 -> Int8X64
packInt8X64 (Tuple64 (I8# x1) (I8# x2) (I8# x3) (I8# x4) (I8# x5) (I8# x6) (I8# x7) (I8# x8) (I8# x9) (I8# x10) (I8# x11) (I8# x12) (I8# x13) (I8# x14) (I8# x15) (I8# x16) (I8# x17) (I8# x18) (I8# x19) (I8# x20) (I8# x21) (I8# x22) (I8# x23) (I8# x24) (I8# x25) (I8# x26) (I8# x27) (I8# x28) (I8# x29) (I8# x30) (I8# x31) (I8# x32) (I8# x33) (I8# x34) (I8# x35) (I8# x36) (I8# x37) (I8# x38) (I8# x39) (I8# x40) (I8# x41) (I8# x42) (I8# x43) (I8# x44) (I8# x45) (I8# x46) (I8# x47) (I8# x48) (I8# x49) (I8# x50) (I8# x51) (I8# x52) (I8# x53) (I8# x54) (I8# x55) (I8# x56) (I8# x57) (I8# x58) (I8# x59) (I8# x60) (I8# x61) (I8# x62) (I8# x63) (I8# x64)) = Int8X64 (packInt8# (# x1 #)) (packInt8# (# x2 #)) (packInt8# (# x3 #)) (packInt8# (# x4 #)) (packInt8# (# x5 #)) (packInt8# (# x6 #)) (packInt8# (# x7 #)) (packInt8# (# x8 #)) (packInt8# (# x9 #)) (packInt8# (# x10 #)) (packInt8# (# x11 #)) (packInt8# (# x12 #)) (packInt8# (# x13 #)) (packInt8# (# x14 #)) (packInt8# (# x15 #)) (packInt8# (# x16 #)) (packInt8# (# x17 #)) (packInt8# (# x18 #)) (packInt8# (# x19 #)) (packInt8# (# x20 #)) (packInt8# (# x21 #)) (packInt8# (# x22 #)) (packInt8# (# x23 #)) (packInt8# (# x24 #)) (packInt8# (# x25 #)) (packInt8# (# x26 #)) (packInt8# (# x27 #)) (packInt8# (# x28 #)) (packInt8# (# x29 #)) (packInt8# (# x30 #)) (packInt8# (# x31 #)) (packInt8# (# x32 #)) (packInt8# (# x33 #)) (packInt8# (# x34 #)) (packInt8# (# x35 #)) (packInt8# (# x36 #)) (packInt8# (# x37 #)) (packInt8# (# x38 #)) (packInt8# (# x39 #)) (packInt8# (# x40 #)) (packInt8# (# x41 #)) (packInt8# (# x42 #)) (packInt8# (# x43 #)) (packInt8# (# x44 #)) (packInt8# (# x45 #)) (packInt8# (# x46 #)) (packInt8# (# x47 #)) (packInt8# (# x48 #)) (packInt8# (# x49 #)) (packInt8# (# x50 #)) (packInt8# (# x51 #)) (packInt8# (# x52 #)) (packInt8# (# x53 #)) (packInt8# (# x54 #)) (packInt8# (# x55 #)) (packInt8# (# x56 #)) (packInt8# (# x57 #)) (packInt8# (# x58 #)) (packInt8# (# x59 #)) (packInt8# (# x60 #)) (packInt8# (# x61 #)) (packInt8# (# x62 #)) (packInt8# (# x63 #)) (packInt8# (# x64 #))

{-# INLINE unpackInt8X64 #-}
-- | Unpack the elements of a vector into a tuple.
unpackInt8X64 :: Int8X64 -> Tuple64 Int8
unpackInt8X64 (Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64) = case unpackInt8# m1 of
    (# x1 #) -> case unpackInt8# m2 of
        (# x2 #) -> case unpackInt8# m3 of
            (# x3 #) -> case unpackInt8# m4 of
                (# x4 #) -> case unpackInt8# m5 of
                    (# x5 #) -> case unpackInt8# m6 of
                        (# x6 #) -> case unpackInt8# m7 of
                            (# x7 #) -> case unpackInt8# m8 of
                                (# x8 #) -> case unpackInt8# m9 of
                                    (# x9 #) -> case unpackInt8# m10 of
                                        (# x10 #) -> case unpackInt8# m11 of
                                            (# x11 #) -> case unpackInt8# m12 of
                                                (# x12 #) -> case unpackInt8# m13 of
                                                    (# x13 #) -> case unpackInt8# m14 of
                                                        (# x14 #) -> case unpackInt8# m15 of
                                                            (# x15 #) -> case unpackInt8# m16 of
                                                                (# x16 #) -> case unpackInt8# m17 of
                                                                    (# x17 #) -> case unpackInt8# m18 of
                                                                        (# x18 #) -> case unpackInt8# m19 of
                                                                            (# x19 #) -> case unpackInt8# m20 of
                                                                                (# x20 #) -> case unpackInt8# m21 of
                                                                                    (# x21 #) -> case unpackInt8# m22 of
                                                                                        (# x22 #) -> case unpackInt8# m23 of
                                                                                            (# x23 #) -> case unpackInt8# m24 of
                                                                                                (# x24 #) -> case unpackInt8# m25 of
                                                                                                    (# x25 #) -> case unpackInt8# m26 of
                                                                                                        (# x26 #) -> case unpackInt8# m27 of
                                                                                                            (# x27 #) -> case unpackInt8# m28 of
                                                                                                                (# x28 #) -> case unpackInt8# m29 of
                                                                                                                    (# x29 #) -> case unpackInt8# m30 of
                                                                                                                        (# x30 #) -> case unpackInt8# m31 of
                                                                                                                            (# x31 #) -> case unpackInt8# m32 of
                                                                                                                                (# x32 #) -> case unpackInt8# m33 of
                                                                                                                                    (# x33 #) -> case unpackInt8# m34 of
                                                                                                                                        (# x34 #) -> case unpackInt8# m35 of
                                                                                                                                            (# x35 #) -> case unpackInt8# m36 of
                                                                                                                                                (# x36 #) -> case unpackInt8# m37 of
                                                                                                                                                    (# x37 #) -> case unpackInt8# m38 of
                                                                                                                                                        (# x38 #) -> case unpackInt8# m39 of
                                                                                                                                                            (# x39 #) -> case unpackInt8# m40 of
                                                                                                                                                                (# x40 #) -> case unpackInt8# m41 of
                                                                                                                                                                    (# x41 #) -> case unpackInt8# m42 of
                                                                                                                                                                        (# x42 #) -> case unpackInt8# m43 of
                                                                                                                                                                            (# x43 #) -> case unpackInt8# m44 of
                                                                                                                                                                                (# x44 #) -> case unpackInt8# m45 of
                                                                                                                                                                                    (# x45 #) -> case unpackInt8# m46 of
                                                                                                                                                                                        (# x46 #) -> case unpackInt8# m47 of
                                                                                                                                                                                            (# x47 #) -> case unpackInt8# m48 of
                                                                                                                                                                                                (# x48 #) -> case unpackInt8# m49 of
                                                                                                                                                                                                    (# x49 #) -> case unpackInt8# m50 of
                                                                                                                                                                                                        (# x50 #) -> case unpackInt8# m51 of
                                                                                                                                                                                                            (# x51 #) -> case unpackInt8# m52 of
                                                                                                                                                                                                                (# x52 #) -> case unpackInt8# m53 of
                                                                                                                                                                                                                    (# x53 #) -> case unpackInt8# m54 of
                                                                                                                                                                                                                        (# x54 #) -> case unpackInt8# m55 of
                                                                                                                                                                                                                            (# x55 #) -> case unpackInt8# m56 of
                                                                                                                                                                                                                                (# x56 #) -> case unpackInt8# m57 of
                                                                                                                                                                                                                                    (# x57 #) -> case unpackInt8# m58 of
                                                                                                                                                                                                                                        (# x58 #) -> case unpackInt8# m59 of
                                                                                                                                                                                                                                            (# x59 #) -> case unpackInt8# m60 of
                                                                                                                                                                                                                                                (# x60 #) -> case unpackInt8# m61 of
                                                                                                                                                                                                                                                    (# x61 #) -> case unpackInt8# m62 of
                                                                                                                                                                                                                                                        (# x62 #) -> case unpackInt8# m63 of
                                                                                                                                                                                                                                                            (# x63 #) -> case unpackInt8# m64 of
                                                                                                                                                                                                                                                                (# x64 #) -> Tuple64 (I8# x1) (I8# x2) (I8# x3) (I8# x4) (I8# x5) (I8# x6) (I8# x7) (I8# x8) (I8# x9) (I8# x10) (I8# x11) (I8# x12) (I8# x13) (I8# x14) (I8# x15) (I8# x16) (I8# x17) (I8# x18) (I8# x19) (I8# x20) (I8# x21) (I8# x22) (I8# x23) (I8# x24) (I8# x25) (I8# x26) (I8# x27) (I8# x28) (I8# x29) (I8# x30) (I8# x31) (I8# x32) (I8# x33) (I8# x34) (I8# x35) (I8# x36) (I8# x37) (I8# x38) (I8# x39) (I8# x40) (I8# x41) (I8# x42) (I8# x43) (I8# x44) (I8# x45) (I8# x46) (I8# x47) (I8# x48) (I8# x49) (I8# x50) (I8# x51) (I8# x52) (I8# x53) (I8# x54) (I8# x55) (I8# x56) (I8# x57) (I8# x58) (I8# x59) (I8# x60) (I8# x61) (I8# x62) (I8# x63) (I8# x64)

{-# INLINE unsafeInsertInt8X64 #-}
-- | Insert a scalar at the given position (starting from 0) in a vector. If the index is outside of the range, the behavior is undefined.
unsafeInsertInt8X64 :: Int8X64 -> Int8 -> Int -> Int8X64
unsafeInsertInt8X64 (Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64) (I8# y) _i@(I# ip) | _i < 1 = Int8X64 (insertInt8# m1 y (ip -# 0#)) m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 2 = Int8X64 m1 (insertInt8# m2 y (ip -# 1#)) m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 3 = Int8X64 m1 m2 (insertInt8# m3 y (ip -# 2#)) m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 4 = Int8X64 m1 m2 m3 (insertInt8# m4 y (ip -# 3#)) m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 5 = Int8X64 m1 m2 m3 m4 (insertInt8# m5 y (ip -# 4#)) m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 6 = Int8X64 m1 m2 m3 m4 m5 (insertInt8# m6 y (ip -# 5#)) m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 7 = Int8X64 m1 m2 m3 m4 m5 m6 (insertInt8# m7 y (ip -# 6#)) m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 8 = Int8X64 m1 m2 m3 m4 m5 m6 m7 (insertInt8# m8 y (ip -# 7#)) m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 9 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 (insertInt8# m9 y (ip -# 8#)) m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 10 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 (insertInt8# m10 y (ip -# 9#)) m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 11 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 (insertInt8# m11 y (ip -# 10#)) m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 12 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 (insertInt8# m12 y (ip -# 11#)) m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 13 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 (insertInt8# m13 y (ip -# 12#)) m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 14 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 (insertInt8# m14 y (ip -# 13#)) m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 15 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 (insertInt8# m15 y (ip -# 14#)) m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 16 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 (insertInt8# m16 y (ip -# 15#)) m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 17 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 (insertInt8# m17 y (ip -# 16#)) m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 18 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 (insertInt8# m18 y (ip -# 17#)) m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 19 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 (insertInt8# m19 y (ip -# 18#)) m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 20 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 (insertInt8# m20 y (ip -# 19#)) m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 21 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 (insertInt8# m21 y (ip -# 20#)) m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 22 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 (insertInt8# m22 y (ip -# 21#)) m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 23 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 (insertInt8# m23 y (ip -# 22#)) m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 24 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 (insertInt8# m24 y (ip -# 23#)) m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 25 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 (insertInt8# m25 y (ip -# 24#)) m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 26 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 (insertInt8# m26 y (ip -# 25#)) m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 27 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 (insertInt8# m27 y (ip -# 26#)) m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 28 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 (insertInt8# m28 y (ip -# 27#)) m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 29 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 (insertInt8# m29 y (ip -# 28#)) m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 30 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 (insertInt8# m30 y (ip -# 29#)) m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 31 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 (insertInt8# m31 y (ip -# 30#)) m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 32 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 (insertInt8# m32 y (ip -# 31#)) m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 33 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 (insertInt8# m33 y (ip -# 32#)) m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 34 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 (insertInt8# m34 y (ip -# 33#)) m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 35 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 (insertInt8# m35 y (ip -# 34#)) m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 36 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 (insertInt8# m36 y (ip -# 35#)) m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 37 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 (insertInt8# m37 y (ip -# 36#)) m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 38 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 (insertInt8# m38 y (ip -# 37#)) m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 39 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 (insertInt8# m39 y (ip -# 38#)) m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 40 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 (insertInt8# m40 y (ip -# 39#)) m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 41 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 (insertInt8# m41 y (ip -# 40#)) m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 42 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 (insertInt8# m42 y (ip -# 41#)) m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 43 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 (insertInt8# m43 y (ip -# 42#)) m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 44 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 (insertInt8# m44 y (ip -# 43#)) m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 45 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 (insertInt8# m45 y (ip -# 44#)) m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 46 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 (insertInt8# m46 y (ip -# 45#)) m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 47 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 (insertInt8# m47 y (ip -# 46#)) m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 48 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 (insertInt8# m48 y (ip -# 47#)) m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 49 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 (insertInt8# m49 y (ip -# 48#)) m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 50 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 (insertInt8# m50 y (ip -# 49#)) m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 51 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 (insertInt8# m51 y (ip -# 50#)) m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 52 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 (insertInt8# m52 y (ip -# 51#)) m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 53 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 (insertInt8# m53 y (ip -# 52#)) m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 54 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 (insertInt8# m54 y (ip -# 53#)) m55 m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 55 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 (insertInt8# m55 y (ip -# 54#)) m56 m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 56 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 (insertInt8# m56 y (ip -# 55#)) m57 m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 57 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 (insertInt8# m57 y (ip -# 56#)) m58 m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 58 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 (insertInt8# m58 y (ip -# 57#)) m59 m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 59 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 (insertInt8# m59 y (ip -# 58#)) m60 m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 60 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 (insertInt8# m60 y (ip -# 59#)) m61 m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 61 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 (insertInt8# m61 y (ip -# 60#)) m62 m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 62 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 (insertInt8# m62 y (ip -# 61#)) m63 m64
                                                                                                                                                                                                                                                                                                        | _i < 63 = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 (insertInt8# m63 y (ip -# 62#)) m64
                                                                                                                                                                                                                                                                                                        | otherwise = Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 (insertInt8# m64 y (ip -# 63#))

{-# INLINE[1] mapInt8X64 #-}
-- | Apply a function to each element of a vector (unpacks and repacks the vector)
mapInt8X64 :: (Int8 -> Int8) -> Int8X64 -> Int8X64
mapInt8X64 f = mapInt8X64# (\ x -> case f (I8# x) of { I8# y -> y})

{-# RULES "mapVector abs" mapInt8X64 abs = abs #-}
{-# RULES "mapVector signum" mapInt8X64 signum = signum #-}
{-# RULES "mapVector negate" mapInt8X64 negate = negate #-}
{-# RULES "mapVector const" forall x . mapInt8X64 (const x) = const (broadcastVector x) #-}
{-# RULES "mapVector (x+)" forall x v . mapInt8X64 (\ y -> x + y) v = broadcastVector x + v #-}
{-# RULES "mapVector (+x)" forall x v . mapInt8X64 (\ y -> y + x) v = v + broadcastVector x #-}
{-# RULES "mapVector (x-)" forall x v . mapInt8X64 (\ y -> x - y) v = broadcastVector x - v #-}
{-# RULES "mapVector (-x)" forall x v . mapInt8X64 (\ y -> y - x) v = v - broadcastVector x #-}
{-# RULES "mapVector (x*)" forall x v . mapInt8X64 (\ y -> x * y) v = broadcastVector x * v #-}
{-# RULES "mapVector (*x)" forall x v . mapInt8X64 (\ y -> y * x) v = v * broadcastVector x #-}

{-# RULES "mapVector (`quot` x)" forall x v . mapInt8X64 (\ y -> y `quot` x) v = v `quotVector` broadcastVector x #-}
{-# RULES "mapVector (x `quot`)" forall x v . mapInt8X64 (\ y -> x `quot` y) v = broadcastVector x `quotVector` v #-}

{-# INLINE[0] mapInt8X64# #-}
-- | Unboxed helper function.
mapInt8X64# :: (Int# -> Int#) -> Int8X64 -> Int8X64
mapInt8X64# f = \ v -> case unpackInt8X64 v of
    Tuple64 (I8# x1) (I8# x2) (I8# x3) (I8# x4) (I8# x5) (I8# x6) (I8# x7) (I8# x8) (I8# x9) (I8# x10) (I8# x11) (I8# x12) (I8# x13) (I8# x14) (I8# x15) (I8# x16) (I8# x17) (I8# x18) (I8# x19) (I8# x20) (I8# x21) (I8# x22) (I8# x23) (I8# x24) (I8# x25) (I8# x26) (I8# x27) (I8# x28) (I8# x29) (I8# x30) (I8# x31) (I8# x32) (I8# x33) (I8# x34) (I8# x35) (I8# x36) (I8# x37) (I8# x38) (I8# x39) (I8# x40) (I8# x41) (I8# x42) (I8# x43) (I8# x44) (I8# x45) (I8# x46) (I8# x47) (I8# x48) (I8# x49) (I8# x50) (I8# x51) (I8# x52) (I8# x53) (I8# x54) (I8# x55) (I8# x56) (I8# x57) (I8# x58) (I8# x59) (I8# x60) (I8# x61) (I8# x62) (I8# x63) (I8# x64) -> packInt8X64 (Tuple64 (I8# (f x1)) (I8# (f x2)) (I8# (f x3)) (I8# (f x4)) (I8# (f x5)) (I8# (f x6)) (I8# (f x7)) (I8# (f x8)) (I8# (f x9)) (I8# (f x10)) (I8# (f x11)) (I8# (f x12)) (I8# (f x13)) (I8# (f x14)) (I8# (f x15)) (I8# (f x16)) (I8# (f x17)) (I8# (f x18)) (I8# (f x19)) (I8# (f x20)) (I8# (f x21)) (I8# (f x22)) (I8# (f x23)) (I8# (f x24)) (I8# (f x25)) (I8# (f x26)) (I8# (f x27)) (I8# (f x28)) (I8# (f x29)) (I8# (f x30)) (I8# (f x31)) (I8# (f x32)) (I8# (f x33)) (I8# (f x34)) (I8# (f x35)) (I8# (f x36)) (I8# (f x37)) (I8# (f x38)) (I8# (f x39)) (I8# (f x40)) (I8# (f x41)) (I8# (f x42)) (I8# (f x43)) (I8# (f x44)) (I8# (f x45)) (I8# (f x46)) (I8# (f x47)) (I8# (f x48)) (I8# (f x49)) (I8# (f x50)) (I8# (f x51)) (I8# (f x52)) (I8# (f x53)) (I8# (f x54)) (I8# (f x55)) (I8# (f x56)) (I8# (f x57)) (I8# (f x58)) (I8# (f x59)) (I8# (f x60)) (I8# (f x61)) (I8# (f x62)) (I8# (f x63)) (I8# (f x64)))

{-# INLINE[1] zipInt8X64 #-}
-- | Zip two vectors together using a combining function (unpacks and repacks the vectors)
zipInt8X64 :: (Int8 -> Int8 -> Int8) -> Int8X64 -> Int8X64 -> Int8X64
zipInt8X64 f = \ v1 v2 -> case unpackInt8X64 v1 of
    Tuple64 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45 x46 x47 x48 x49 x50 x51 x52 x53 x54 x55 x56 x57 x58 x59 x60 x61 x62 x63 x64 -> case unpackInt8X64 v2 of
        Tuple64 y1 y2 y3 y4 y5 y6 y7 y8 y9 y10 y11 y12 y13 y14 y15 y16 y17 y18 y19 y20 y21 y22 y23 y24 y25 y26 y27 y28 y29 y30 y31 y32 y33 y34 y35 y36 y37 y38 y39 y40 y41 y42 y43 y44 y45 y46 y47 y48 y49 y50 y51 y52 y53 y54 y55 y56 y57 y58 y59 y60 y61 y62 y63 y64 -> packInt8X64 (Tuple64 (f x1 y1) (f x2 y2) (f x3 y3) (f x4 y4) (f x5 y5) (f x6 y6) (f x7 y7) (f x8 y8) (f x9 y9) (f x10 y10) (f x11 y11) (f x12 y12) (f x13 y13) (f x14 y14) (f x15 y15) (f x16 y16) (f x17 y17) (f x18 y18) (f x19 y19) (f x20 y20) (f x21 y21) (f x22 y22) (f x23 y23) (f x24 y24) (f x25 y25) (f x26 y26) (f x27 y27) (f x28 y28) (f x29 y29) (f x30 y30) (f x31 y31) (f x32 y32) (f x33 y33) (f x34 y34) (f x35 y35) (f x36 y36) (f x37 y37) (f x38 y38) (f x39 y39) (f x40 y40) (f x41 y41) (f x42 y42) (f x43 y43) (f x44 y44) (f x45 y45) (f x46 y46) (f x47 y47) (f x48 y48) (f x49 y49) (f x50 y50) (f x51 y51) (f x52 y52) (f x53 y53) (f x54 y54) (f x55 y55) (f x56 y56) (f x57 y57) (f x58 y58) (f x59 y59) (f x60 y60) (f x61 y61) (f x62 y62) (f x63 y63) (f x64 y64))

{-# RULES "zipVector +" forall a b . zipInt8X64 (+) a b = a + b #-}
{-# RULES "zipVector -" forall a b . zipInt8X64 (-) a b = a - b #-}
{-# RULES "zipVector *" forall a b . zipInt8X64 (*) a b = a * b #-}
{-# RULES "zipVector `quotVector`" forall a b . zipInt8X64 quot a b = a `quotVector` b #-}
{-# RULES "zipVector `remVector`" forall a b . zipInt8X64 rem a b = a `remVector` b #-}

{-# INLINE[1] foldInt8X64 #-}
-- | Fold the elements of a vector to a single value
foldInt8X64 :: (Int8 -> Int8 -> Int8) -> Int8X64 -> Int8
foldInt8X64 f' = \ v -> case unpackInt8X64 v of
    Tuple64 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24 x25 x26 x27 x28 x29 x30 x31 x32 x33 x34 x35 x36 x37 x38 x39 x40 x41 x42 x43 x44 x45 x46 x47 x48 x49 x50 x51 x52 x53 x54 x55 x56 x57 x58 x59 x60 x61 x62 x63 x64 -> x1 `f` x2 `f` x3 `f` x4 `f` x5 `f` x6 `f` x7 `f` x8 `f` x9 `f` x10 `f` x11 `f` x12 `f` x13 `f` x14 `f` x15 `f` x16 `f` x17 `f` x18 `f` x19 `f` x20 `f` x21 `f` x22 `f` x23 `f` x24 `f` x25 `f` x26 `f` x27 `f` x28 `f` x29 `f` x30 `f` x31 `f` x32 `f` x33 `f` x34 `f` x35 `f` x36 `f` x37 `f` x38 `f` x39 `f` x40 `f` x41 `f` x42 `f` x43 `f` x44 `f` x45 `f` x46 `f` x47 `f` x48 `f` x49 `f` x50 `f` x51 `f` x52 `f` x53 `f` x54 `f` x55 `f` x56 `f` x57 `f` x58 `f` x59 `f` x60 `f` x61 `f` x62 `f` x63 `f` x64
    where f !x !y = f' x y

{-# INLINE plusInt8X64 #-}
-- | Add two vectors element-wise.
plusInt8X64 :: Int8X64 -> Int8X64 -> Int8X64
plusInt8X64 (Int8X64 m1_1 m2_1 m3_1 m4_1 m5_1 m6_1 m7_1 m8_1 m9_1 m10_1 m11_1 m12_1 m13_1 m14_1 m15_1 m16_1 m17_1 m18_1 m19_1 m20_1 m21_1 m22_1 m23_1 m24_1 m25_1 m26_1 m27_1 m28_1 m29_1 m30_1 m31_1 m32_1 m33_1 m34_1 m35_1 m36_1 m37_1 m38_1 m39_1 m40_1 m41_1 m42_1 m43_1 m44_1 m45_1 m46_1 m47_1 m48_1 m49_1 m50_1 m51_1 m52_1 m53_1 m54_1 m55_1 m56_1 m57_1 m58_1 m59_1 m60_1 m61_1 m62_1 m63_1 m64_1) (Int8X64 m1_2 m2_2 m3_2 m4_2 m5_2 m6_2 m7_2 m8_2 m9_2 m10_2 m11_2 m12_2 m13_2 m14_2 m15_2 m16_2 m17_2 m18_2 m19_2 m20_2 m21_2 m22_2 m23_2 m24_2 m25_2 m26_2 m27_2 m28_2 m29_2 m30_2 m31_2 m32_2 m33_2 m34_2 m35_2 m36_2 m37_2 m38_2 m39_2 m40_2 m41_2 m42_2 m43_2 m44_2 m45_2 m46_2 m47_2 m48_2 m49_2 m50_2 m51_2 m52_2 m53_2 m54_2 m55_2 m56_2 m57_2 m58_2 m59_2 m60_2 m61_2 m62_2 m63_2 m64_2) = Int8X64 (plusInt8# m1_1 m1_2) (plusInt8# m2_1 m2_2) (plusInt8# m3_1 m3_2) (plusInt8# m4_1 m4_2) (plusInt8# m5_1 m5_2) (plusInt8# m6_1 m6_2) (plusInt8# m7_1 m7_2) (plusInt8# m8_1 m8_2) (plusInt8# m9_1 m9_2) (plusInt8# m10_1 m10_2) (plusInt8# m11_1 m11_2) (plusInt8# m12_1 m12_2) (plusInt8# m13_1 m13_2) (plusInt8# m14_1 m14_2) (plusInt8# m15_1 m15_2) (plusInt8# m16_1 m16_2) (plusInt8# m17_1 m17_2) (plusInt8# m18_1 m18_2) (plusInt8# m19_1 m19_2) (plusInt8# m20_1 m20_2) (plusInt8# m21_1 m21_2) (plusInt8# m22_1 m22_2) (plusInt8# m23_1 m23_2) (plusInt8# m24_1 m24_2) (plusInt8# m25_1 m25_2) (plusInt8# m26_1 m26_2) (plusInt8# m27_1 m27_2) (plusInt8# m28_1 m28_2) (plusInt8# m29_1 m29_2) (plusInt8# m30_1 m30_2) (plusInt8# m31_1 m31_2) (plusInt8# m32_1 m32_2) (plusInt8# m33_1 m33_2) (plusInt8# m34_1 m34_2) (plusInt8# m35_1 m35_2) (plusInt8# m36_1 m36_2) (plusInt8# m37_1 m37_2) (plusInt8# m38_1 m38_2) (plusInt8# m39_1 m39_2) (plusInt8# m40_1 m40_2) (plusInt8# m41_1 m41_2) (plusInt8# m42_1 m42_2) (plusInt8# m43_1 m43_2) (plusInt8# m44_1 m44_2) (plusInt8# m45_1 m45_2) (plusInt8# m46_1 m46_2) (plusInt8# m47_1 m47_2) (plusInt8# m48_1 m48_2) (plusInt8# m49_1 m49_2) (plusInt8# m50_1 m50_2) (plusInt8# m51_1 m51_2) (plusInt8# m52_1 m52_2) (plusInt8# m53_1 m53_2) (plusInt8# m54_1 m54_2) (plusInt8# m55_1 m55_2) (plusInt8# m56_1 m56_2) (plusInt8# m57_1 m57_2) (plusInt8# m58_1 m58_2) (plusInt8# m59_1 m59_2) (plusInt8# m60_1 m60_2) (plusInt8# m61_1 m61_2) (plusInt8# m62_1 m62_2) (plusInt8# m63_1 m63_2) (plusInt8# m64_1 m64_2)

{-# INLINE minusInt8X64 #-}
-- | Subtract two vectors element-wise.
minusInt8X64 :: Int8X64 -> Int8X64 -> Int8X64
minusInt8X64 (Int8X64 m1_1 m2_1 m3_1 m4_1 m5_1 m6_1 m7_1 m8_1 m9_1 m10_1 m11_1 m12_1 m13_1 m14_1 m15_1 m16_1 m17_1 m18_1 m19_1 m20_1 m21_1 m22_1 m23_1 m24_1 m25_1 m26_1 m27_1 m28_1 m29_1 m30_1 m31_1 m32_1 m33_1 m34_1 m35_1 m36_1 m37_1 m38_1 m39_1 m40_1 m41_1 m42_1 m43_1 m44_1 m45_1 m46_1 m47_1 m48_1 m49_1 m50_1 m51_1 m52_1 m53_1 m54_1 m55_1 m56_1 m57_1 m58_1 m59_1 m60_1 m61_1 m62_1 m63_1 m64_1) (Int8X64 m1_2 m2_2 m3_2 m4_2 m5_2 m6_2 m7_2 m8_2 m9_2 m10_2 m11_2 m12_2 m13_2 m14_2 m15_2 m16_2 m17_2 m18_2 m19_2 m20_2 m21_2 m22_2 m23_2 m24_2 m25_2 m26_2 m27_2 m28_2 m29_2 m30_2 m31_2 m32_2 m33_2 m34_2 m35_2 m36_2 m37_2 m38_2 m39_2 m40_2 m41_2 m42_2 m43_2 m44_2 m45_2 m46_2 m47_2 m48_2 m49_2 m50_2 m51_2 m52_2 m53_2 m54_2 m55_2 m56_2 m57_2 m58_2 m59_2 m60_2 m61_2 m62_2 m63_2 m64_2) = Int8X64 (minusInt8# m1_1 m1_2) (minusInt8# m2_1 m2_2) (minusInt8# m3_1 m3_2) (minusInt8# m4_1 m4_2) (minusInt8# m5_1 m5_2) (minusInt8# m6_1 m6_2) (minusInt8# m7_1 m7_2) (minusInt8# m8_1 m8_2) (minusInt8# m9_1 m9_2) (minusInt8# m10_1 m10_2) (minusInt8# m11_1 m11_2) (minusInt8# m12_1 m12_2) (minusInt8# m13_1 m13_2) (minusInt8# m14_1 m14_2) (minusInt8# m15_1 m15_2) (minusInt8# m16_1 m16_2) (minusInt8# m17_1 m17_2) (minusInt8# m18_1 m18_2) (minusInt8# m19_1 m19_2) (minusInt8# m20_1 m20_2) (minusInt8# m21_1 m21_2) (minusInt8# m22_1 m22_2) (minusInt8# m23_1 m23_2) (minusInt8# m24_1 m24_2) (minusInt8# m25_1 m25_2) (minusInt8# m26_1 m26_2) (minusInt8# m27_1 m27_2) (minusInt8# m28_1 m28_2) (minusInt8# m29_1 m29_2) (minusInt8# m30_1 m30_2) (minusInt8# m31_1 m31_2) (minusInt8# m32_1 m32_2) (minusInt8# m33_1 m33_2) (minusInt8# m34_1 m34_2) (minusInt8# m35_1 m35_2) (minusInt8# m36_1 m36_2) (minusInt8# m37_1 m37_2) (minusInt8# m38_1 m38_2) (minusInt8# m39_1 m39_2) (minusInt8# m40_1 m40_2) (minusInt8# m41_1 m41_2) (minusInt8# m42_1 m42_2) (minusInt8# m43_1 m43_2) (minusInt8# m44_1 m44_2) (minusInt8# m45_1 m45_2) (minusInt8# m46_1 m46_2) (minusInt8# m47_1 m47_2) (minusInt8# m48_1 m48_2) (minusInt8# m49_1 m49_2) (minusInt8# m50_1 m50_2) (minusInt8# m51_1 m51_2) (minusInt8# m52_1 m52_2) (minusInt8# m53_1 m53_2) (minusInt8# m54_1 m54_2) (minusInt8# m55_1 m55_2) (minusInt8# m56_1 m56_2) (minusInt8# m57_1 m57_2) (minusInt8# m58_1 m58_2) (minusInt8# m59_1 m59_2) (minusInt8# m60_1 m60_2) (minusInt8# m61_1 m61_2) (minusInt8# m62_1 m62_2) (minusInt8# m63_1 m63_2) (minusInt8# m64_1 m64_2)

{-# INLINE timesInt8X64 #-}
-- | Multiply two vectors element-wise.
timesInt8X64 :: Int8X64 -> Int8X64 -> Int8X64
timesInt8X64 (Int8X64 m1_1 m2_1 m3_1 m4_1 m5_1 m6_1 m7_1 m8_1 m9_1 m10_1 m11_1 m12_1 m13_1 m14_1 m15_1 m16_1 m17_1 m18_1 m19_1 m20_1 m21_1 m22_1 m23_1 m24_1 m25_1 m26_1 m27_1 m28_1 m29_1 m30_1 m31_1 m32_1 m33_1 m34_1 m35_1 m36_1 m37_1 m38_1 m39_1 m40_1 m41_1 m42_1 m43_1 m44_1 m45_1 m46_1 m47_1 m48_1 m49_1 m50_1 m51_1 m52_1 m53_1 m54_1 m55_1 m56_1 m57_1 m58_1 m59_1 m60_1 m61_1 m62_1 m63_1 m64_1) (Int8X64 m1_2 m2_2 m3_2 m4_2 m5_2 m6_2 m7_2 m8_2 m9_2 m10_2 m11_2 m12_2 m13_2 m14_2 m15_2 m16_2 m17_2 m18_2 m19_2 m20_2 m21_2 m22_2 m23_2 m24_2 m25_2 m26_2 m27_2 m28_2 m29_2 m30_2 m31_2 m32_2 m33_2 m34_2 m35_2 m36_2 m37_2 m38_2 m39_2 m40_2 m41_2 m42_2 m43_2 m44_2 m45_2 m46_2 m47_2 m48_2 m49_2 m50_2 m51_2 m52_2 m53_2 m54_2 m55_2 m56_2 m57_2 m58_2 m59_2 m60_2 m61_2 m62_2 m63_2 m64_2) = Int8X64 (timesInt8# m1_1 m1_2) (timesInt8# m2_1 m2_2) (timesInt8# m3_1 m3_2) (timesInt8# m4_1 m4_2) (timesInt8# m5_1 m5_2) (timesInt8# m6_1 m6_2) (timesInt8# m7_1 m7_2) (timesInt8# m8_1 m8_2) (timesInt8# m9_1 m9_2) (timesInt8# m10_1 m10_2) (timesInt8# m11_1 m11_2) (timesInt8# m12_1 m12_2) (timesInt8# m13_1 m13_2) (timesInt8# m14_1 m14_2) (timesInt8# m15_1 m15_2) (timesInt8# m16_1 m16_2) (timesInt8# m17_1 m17_2) (timesInt8# m18_1 m18_2) (timesInt8# m19_1 m19_2) (timesInt8# m20_1 m20_2) (timesInt8# m21_1 m21_2) (timesInt8# m22_1 m22_2) (timesInt8# m23_1 m23_2) (timesInt8# m24_1 m24_2) (timesInt8# m25_1 m25_2) (timesInt8# m26_1 m26_2) (timesInt8# m27_1 m27_2) (timesInt8# m28_1 m28_2) (timesInt8# m29_1 m29_2) (timesInt8# m30_1 m30_2) (timesInt8# m31_1 m31_2) (timesInt8# m32_1 m32_2) (timesInt8# m33_1 m33_2) (timesInt8# m34_1 m34_2) (timesInt8# m35_1 m35_2) (timesInt8# m36_1 m36_2) (timesInt8# m37_1 m37_2) (timesInt8# m38_1 m38_2) (timesInt8# m39_1 m39_2) (timesInt8# m40_1 m40_2) (timesInt8# m41_1 m41_2) (timesInt8# m42_1 m42_2) (timesInt8# m43_1 m43_2) (timesInt8# m44_1 m44_2) (timesInt8# m45_1 m45_2) (timesInt8# m46_1 m46_2) (timesInt8# m47_1 m47_2) (timesInt8# m48_1 m48_2) (timesInt8# m49_1 m49_2) (timesInt8# m50_1 m50_2) (timesInt8# m51_1 m51_2) (timesInt8# m52_1 m52_2) (timesInt8# m53_1 m53_2) (timesInt8# m54_1 m54_2) (timesInt8# m55_1 m55_2) (timesInt8# m56_1 m56_2) (timesInt8# m57_1 m57_2) (timesInt8# m58_1 m58_2) (timesInt8# m59_1 m59_2) (timesInt8# m60_1 m60_2) (timesInt8# m61_1 m61_2) (timesInt8# m62_1 m62_2) (timesInt8# m63_1 m63_2) (timesInt8# m64_1 m64_2)

{-# INLINE quotInt8X64 #-}
-- | Rounds towards zero element-wise.
quotInt8X64 :: Int8X64 -> Int8X64 -> Int8X64
quotInt8X64 (Int8X64 m1_1 m2_1 m3_1 m4_1 m5_1 m6_1 m7_1 m8_1 m9_1 m10_1 m11_1 m12_1 m13_1 m14_1 m15_1 m16_1 m17_1 m18_1 m19_1 m20_1 m21_1 m22_1 m23_1 m24_1 m25_1 m26_1 m27_1 m28_1 m29_1 m30_1 m31_1 m32_1 m33_1 m34_1 m35_1 m36_1 m37_1 m38_1 m39_1 m40_1 m41_1 m42_1 m43_1 m44_1 m45_1 m46_1 m47_1 m48_1 m49_1 m50_1 m51_1 m52_1 m53_1 m54_1 m55_1 m56_1 m57_1 m58_1 m59_1 m60_1 m61_1 m62_1 m63_1 m64_1) (Int8X64 m1_2 m2_2 m3_2 m4_2 m5_2 m6_2 m7_2 m8_2 m9_2 m10_2 m11_2 m12_2 m13_2 m14_2 m15_2 m16_2 m17_2 m18_2 m19_2 m20_2 m21_2 m22_2 m23_2 m24_2 m25_2 m26_2 m27_2 m28_2 m29_2 m30_2 m31_2 m32_2 m33_2 m34_2 m35_2 m36_2 m37_2 m38_2 m39_2 m40_2 m41_2 m42_2 m43_2 m44_2 m45_2 m46_2 m47_2 m48_2 m49_2 m50_2 m51_2 m52_2 m53_2 m54_2 m55_2 m56_2 m57_2 m58_2 m59_2 m60_2 m61_2 m62_2 m63_2 m64_2) = Int8X64 (quotInt8# m1_1 m1_2) (quotInt8# m2_1 m2_2) (quotInt8# m3_1 m3_2) (quotInt8# m4_1 m4_2) (quotInt8# m5_1 m5_2) (quotInt8# m6_1 m6_2) (quotInt8# m7_1 m7_2) (quotInt8# m8_1 m8_2) (quotInt8# m9_1 m9_2) (quotInt8# m10_1 m10_2) (quotInt8# m11_1 m11_2) (quotInt8# m12_1 m12_2) (quotInt8# m13_1 m13_2) (quotInt8# m14_1 m14_2) (quotInt8# m15_1 m15_2) (quotInt8# m16_1 m16_2) (quotInt8# m17_1 m17_2) (quotInt8# m18_1 m18_2) (quotInt8# m19_1 m19_2) (quotInt8# m20_1 m20_2) (quotInt8# m21_1 m21_2) (quotInt8# m22_1 m22_2) (quotInt8# m23_1 m23_2) (quotInt8# m24_1 m24_2) (quotInt8# m25_1 m25_2) (quotInt8# m26_1 m26_2) (quotInt8# m27_1 m27_2) (quotInt8# m28_1 m28_2) (quotInt8# m29_1 m29_2) (quotInt8# m30_1 m30_2) (quotInt8# m31_1 m31_2) (quotInt8# m32_1 m32_2) (quotInt8# m33_1 m33_2) (quotInt8# m34_1 m34_2) (quotInt8# m35_1 m35_2) (quotInt8# m36_1 m36_2) (quotInt8# m37_1 m37_2) (quotInt8# m38_1 m38_2) (quotInt8# m39_1 m39_2) (quotInt8# m40_1 m40_2) (quotInt8# m41_1 m41_2) (quotInt8# m42_1 m42_2) (quotInt8# m43_1 m43_2) (quotInt8# m44_1 m44_2) (quotInt8# m45_1 m45_2) (quotInt8# m46_1 m46_2) (quotInt8# m47_1 m47_2) (quotInt8# m48_1 m48_2) (quotInt8# m49_1 m49_2) (quotInt8# m50_1 m50_2) (quotInt8# m51_1 m51_2) (quotInt8# m52_1 m52_2) (quotInt8# m53_1 m53_2) (quotInt8# m54_1 m54_2) (quotInt8# m55_1 m55_2) (quotInt8# m56_1 m56_2) (quotInt8# m57_1 m57_2) (quotInt8# m58_1 m58_2) (quotInt8# m59_1 m59_2) (quotInt8# m60_1 m60_2) (quotInt8# m61_1 m61_2) (quotInt8# m62_1 m62_2) (quotInt8# m63_1 m63_2) (quotInt8# m64_1 m64_2)

{-# INLINE remInt8X64 #-}
-- | Satisfies (quot x y) * y + (rem x y) == x.
remInt8X64 :: Int8X64 -> Int8X64 -> Int8X64
remInt8X64 (Int8X64 m1_1 m2_1 m3_1 m4_1 m5_1 m6_1 m7_1 m8_1 m9_1 m10_1 m11_1 m12_1 m13_1 m14_1 m15_1 m16_1 m17_1 m18_1 m19_1 m20_1 m21_1 m22_1 m23_1 m24_1 m25_1 m26_1 m27_1 m28_1 m29_1 m30_1 m31_1 m32_1 m33_1 m34_1 m35_1 m36_1 m37_1 m38_1 m39_1 m40_1 m41_1 m42_1 m43_1 m44_1 m45_1 m46_1 m47_1 m48_1 m49_1 m50_1 m51_1 m52_1 m53_1 m54_1 m55_1 m56_1 m57_1 m58_1 m59_1 m60_1 m61_1 m62_1 m63_1 m64_1) (Int8X64 m1_2 m2_2 m3_2 m4_2 m5_2 m6_2 m7_2 m8_2 m9_2 m10_2 m11_2 m12_2 m13_2 m14_2 m15_2 m16_2 m17_2 m18_2 m19_2 m20_2 m21_2 m22_2 m23_2 m24_2 m25_2 m26_2 m27_2 m28_2 m29_2 m30_2 m31_2 m32_2 m33_2 m34_2 m35_2 m36_2 m37_2 m38_2 m39_2 m40_2 m41_2 m42_2 m43_2 m44_2 m45_2 m46_2 m47_2 m48_2 m49_2 m50_2 m51_2 m52_2 m53_2 m54_2 m55_2 m56_2 m57_2 m58_2 m59_2 m60_2 m61_2 m62_2 m63_2 m64_2) = Int8X64 (remInt8# m1_1 m1_2) (remInt8# m2_1 m2_2) (remInt8# m3_1 m3_2) (remInt8# m4_1 m4_2) (remInt8# m5_1 m5_2) (remInt8# m6_1 m6_2) (remInt8# m7_1 m7_2) (remInt8# m8_1 m8_2) (remInt8# m9_1 m9_2) (remInt8# m10_1 m10_2) (remInt8# m11_1 m11_2) (remInt8# m12_1 m12_2) (remInt8# m13_1 m13_2) (remInt8# m14_1 m14_2) (remInt8# m15_1 m15_2) (remInt8# m16_1 m16_2) (remInt8# m17_1 m17_2) (remInt8# m18_1 m18_2) (remInt8# m19_1 m19_2) (remInt8# m20_1 m20_2) (remInt8# m21_1 m21_2) (remInt8# m22_1 m22_2) (remInt8# m23_1 m23_2) (remInt8# m24_1 m24_2) (remInt8# m25_1 m25_2) (remInt8# m26_1 m26_2) (remInt8# m27_1 m27_2) (remInt8# m28_1 m28_2) (remInt8# m29_1 m29_2) (remInt8# m30_1 m30_2) (remInt8# m31_1 m31_2) (remInt8# m32_1 m32_2) (remInt8# m33_1 m33_2) (remInt8# m34_1 m34_2) (remInt8# m35_1 m35_2) (remInt8# m36_1 m36_2) (remInt8# m37_1 m37_2) (remInt8# m38_1 m38_2) (remInt8# m39_1 m39_2) (remInt8# m40_1 m40_2) (remInt8# m41_1 m41_2) (remInt8# m42_1 m42_2) (remInt8# m43_1 m43_2) (remInt8# m44_1 m44_2) (remInt8# m45_1 m45_2) (remInt8# m46_1 m46_2) (remInt8# m47_1 m47_2) (remInt8# m48_1 m48_2) (remInt8# m49_1 m49_2) (remInt8# m50_1 m50_2) (remInt8# m51_1 m51_2) (remInt8# m52_1 m52_2) (remInt8# m53_1 m53_2) (remInt8# m54_1 m54_2) (remInt8# m55_1 m55_2) (remInt8# m56_1 m56_2) (remInt8# m57_1 m57_2) (remInt8# m58_1 m58_2) (remInt8# m59_1 m59_2) (remInt8# m60_1 m60_2) (remInt8# m61_1 m61_2) (remInt8# m62_1 m62_2) (remInt8# m63_1 m63_2) (remInt8# m64_1 m64_2)

{-# INLINE negateInt8X64 #-}
-- | Negate element-wise.
negateInt8X64 :: Int8X64 -> Int8X64
negateInt8X64 (Int8X64 m1_1 m2_1 m3_1 m4_1 m5_1 m6_1 m7_1 m8_1 m9_1 m10_1 m11_1 m12_1 m13_1 m14_1 m15_1 m16_1 m17_1 m18_1 m19_1 m20_1 m21_1 m22_1 m23_1 m24_1 m25_1 m26_1 m27_1 m28_1 m29_1 m30_1 m31_1 m32_1 m33_1 m34_1 m35_1 m36_1 m37_1 m38_1 m39_1 m40_1 m41_1 m42_1 m43_1 m44_1 m45_1 m46_1 m47_1 m48_1 m49_1 m50_1 m51_1 m52_1 m53_1 m54_1 m55_1 m56_1 m57_1 m58_1 m59_1 m60_1 m61_1 m62_1 m63_1 m64_1) = Int8X64 (negateInt8# m1_1) (negateInt8# m2_1) (negateInt8# m3_1) (negateInt8# m4_1) (negateInt8# m5_1) (negateInt8# m6_1) (negateInt8# m7_1) (negateInt8# m8_1) (negateInt8# m9_1) (negateInt8# m10_1) (negateInt8# m11_1) (negateInt8# m12_1) (negateInt8# m13_1) (negateInt8# m14_1) (negateInt8# m15_1) (negateInt8# m16_1) (negateInt8# m17_1) (negateInt8# m18_1) (negateInt8# m19_1) (negateInt8# m20_1) (negateInt8# m21_1) (negateInt8# m22_1) (negateInt8# m23_1) (negateInt8# m24_1) (negateInt8# m25_1) (negateInt8# m26_1) (negateInt8# m27_1) (negateInt8# m28_1) (negateInt8# m29_1) (negateInt8# m30_1) (negateInt8# m31_1) (negateInt8# m32_1) (negateInt8# m33_1) (negateInt8# m34_1) (negateInt8# m35_1) (negateInt8# m36_1) (negateInt8# m37_1) (negateInt8# m38_1) (negateInt8# m39_1) (negateInt8# m40_1) (negateInt8# m41_1) (negateInt8# m42_1) (negateInt8# m43_1) (negateInt8# m44_1) (negateInt8# m45_1) (negateInt8# m46_1) (negateInt8# m47_1) (negateInt8# m48_1) (negateInt8# m49_1) (negateInt8# m50_1) (negateInt8# m51_1) (negateInt8# m52_1) (negateInt8# m53_1) (negateInt8# m54_1) (negateInt8# m55_1) (negateInt8# m56_1) (negateInt8# m57_1) (negateInt8# m58_1) (negateInt8# m59_1) (negateInt8# m60_1) (negateInt8# m61_1) (negateInt8# m62_1) (negateInt8# m63_1) (negateInt8# m64_1)

{-# INLINE indexInt8X64Array #-}
-- | Read a vector from specified index of the immutable array.
indexInt8X64Array :: ByteArray -> Int -> Int8X64
indexInt8X64Array (ByteArray a) (I# i) = Int8X64 (indexInt8Array# a ((i *# 64#) +# 0#)) (indexInt8Array# a ((i *# 64#) +# 1#)) (indexInt8Array# a ((i *# 64#) +# 2#)) (indexInt8Array# a ((i *# 64#) +# 3#)) (indexInt8Array# a ((i *# 64#) +# 4#)) (indexInt8Array# a ((i *# 64#) +# 5#)) (indexInt8Array# a ((i *# 64#) +# 6#)) (indexInt8Array# a ((i *# 64#) +# 7#)) (indexInt8Array# a ((i *# 64#) +# 8#)) (indexInt8Array# a ((i *# 64#) +# 9#)) (indexInt8Array# a ((i *# 64#) +# 10#)) (indexInt8Array# a ((i *# 64#) +# 11#)) (indexInt8Array# a ((i *# 64#) +# 12#)) (indexInt8Array# a ((i *# 64#) +# 13#)) (indexInt8Array# a ((i *# 64#) +# 14#)) (indexInt8Array# a ((i *# 64#) +# 15#)) (indexInt8Array# a ((i *# 64#) +# 16#)) (indexInt8Array# a ((i *# 64#) +# 17#)) (indexInt8Array# a ((i *# 64#) +# 18#)) (indexInt8Array# a ((i *# 64#) +# 19#)) (indexInt8Array# a ((i *# 64#) +# 20#)) (indexInt8Array# a ((i *# 64#) +# 21#)) (indexInt8Array# a ((i *# 64#) +# 22#)) (indexInt8Array# a ((i *# 64#) +# 23#)) (indexInt8Array# a ((i *# 64#) +# 24#)) (indexInt8Array# a ((i *# 64#) +# 25#)) (indexInt8Array# a ((i *# 64#) +# 26#)) (indexInt8Array# a ((i *# 64#) +# 27#)) (indexInt8Array# a ((i *# 64#) +# 28#)) (indexInt8Array# a ((i *# 64#) +# 29#)) (indexInt8Array# a ((i *# 64#) +# 30#)) (indexInt8Array# a ((i *# 64#) +# 31#)) (indexInt8Array# a ((i *# 64#) +# 32#)) (indexInt8Array# a ((i *# 64#) +# 33#)) (indexInt8Array# a ((i *# 64#) +# 34#)) (indexInt8Array# a ((i *# 64#) +# 35#)) (indexInt8Array# a ((i *# 64#) +# 36#)) (indexInt8Array# a ((i *# 64#) +# 37#)) (indexInt8Array# a ((i *# 64#) +# 38#)) (indexInt8Array# a ((i *# 64#) +# 39#)) (indexInt8Array# a ((i *# 64#) +# 40#)) (indexInt8Array# a ((i *# 64#) +# 41#)) (indexInt8Array# a ((i *# 64#) +# 42#)) (indexInt8Array# a ((i *# 64#) +# 43#)) (indexInt8Array# a ((i *# 64#) +# 44#)) (indexInt8Array# a ((i *# 64#) +# 45#)) (indexInt8Array# a ((i *# 64#) +# 46#)) (indexInt8Array# a ((i *# 64#) +# 47#)) (indexInt8Array# a ((i *# 64#) +# 48#)) (indexInt8Array# a ((i *# 64#) +# 49#)) (indexInt8Array# a ((i *# 64#) +# 50#)) (indexInt8Array# a ((i *# 64#) +# 51#)) (indexInt8Array# a ((i *# 64#) +# 52#)) (indexInt8Array# a ((i *# 64#) +# 53#)) (indexInt8Array# a ((i *# 64#) +# 54#)) (indexInt8Array# a ((i *# 64#) +# 55#)) (indexInt8Array# a ((i *# 64#) +# 56#)) (indexInt8Array# a ((i *# 64#) +# 57#)) (indexInt8Array# a ((i *# 64#) +# 58#)) (indexInt8Array# a ((i *# 64#) +# 59#)) (indexInt8Array# a ((i *# 64#) +# 60#)) (indexInt8Array# a ((i *# 64#) +# 61#)) (indexInt8Array# a ((i *# 64#) +# 62#)) (indexInt8Array# a ((i *# 64#) +# 63#))

{-# INLINE readInt8X64Array #-}
-- | Read a vector from specified index of the mutable array.
readInt8X64Array :: PrimMonad m => MutableByteArray (PrimState m) -> Int -> m Int8X64
readInt8X64Array (MutableByteArray a) (I# i) = primitive (\ s0 -> case readInt8Array# a ((i *# 64#) +# 0#) s0 of
    (# s1, m1 #) -> case readInt8Array# a ((i *# 64#) +# 1#) s1 of
        (# s2, m2 #) -> case readInt8Array# a ((i *# 64#) +# 2#) s2 of
            (# s3, m3 #) -> case readInt8Array# a ((i *# 64#) +# 3#) s3 of
                (# s4, m4 #) -> case readInt8Array# a ((i *# 64#) +# 4#) s4 of
                    (# s5, m5 #) -> case readInt8Array# a ((i *# 64#) +# 5#) s5 of
                        (# s6, m6 #) -> case readInt8Array# a ((i *# 64#) +# 6#) s6 of
                            (# s7, m7 #) -> case readInt8Array# a ((i *# 64#) +# 7#) s7 of
                                (# s8, m8 #) -> case readInt8Array# a ((i *# 64#) +# 8#) s8 of
                                    (# s9, m9 #) -> case readInt8Array# a ((i *# 64#) +# 9#) s9 of
                                        (# s10, m10 #) -> case readInt8Array# a ((i *# 64#) +# 10#) s10 of
                                            (# s11, m11 #) -> case readInt8Array# a ((i *# 64#) +# 11#) s11 of
                                                (# s12, m12 #) -> case readInt8Array# a ((i *# 64#) +# 12#) s12 of
                                                    (# s13, m13 #) -> case readInt8Array# a ((i *# 64#) +# 13#) s13 of
                                                        (# s14, m14 #) -> case readInt8Array# a ((i *# 64#) +# 14#) s14 of
                                                            (# s15, m15 #) -> case readInt8Array# a ((i *# 64#) +# 15#) s15 of
                                                                (# s16, m16 #) -> case readInt8Array# a ((i *# 64#) +# 16#) s16 of
                                                                    (# s17, m17 #) -> case readInt8Array# a ((i *# 64#) +# 17#) s17 of
                                                                        (# s18, m18 #) -> case readInt8Array# a ((i *# 64#) +# 18#) s18 of
                                                                            (# s19, m19 #) -> case readInt8Array# a ((i *# 64#) +# 19#) s19 of
                                                                                (# s20, m20 #) -> case readInt8Array# a ((i *# 64#) +# 20#) s20 of
                                                                                    (# s21, m21 #) -> case readInt8Array# a ((i *# 64#) +# 21#) s21 of
                                                                                        (# s22, m22 #) -> case readInt8Array# a ((i *# 64#) +# 22#) s22 of
                                                                                            (# s23, m23 #) -> case readInt8Array# a ((i *# 64#) +# 23#) s23 of
                                                                                                (# s24, m24 #) -> case readInt8Array# a ((i *# 64#) +# 24#) s24 of
                                                                                                    (# s25, m25 #) -> case readInt8Array# a ((i *# 64#) +# 25#) s25 of
                                                                                                        (# s26, m26 #) -> case readInt8Array# a ((i *# 64#) +# 26#) s26 of
                                                                                                            (# s27, m27 #) -> case readInt8Array# a ((i *# 64#) +# 27#) s27 of
                                                                                                                (# s28, m28 #) -> case readInt8Array# a ((i *# 64#) +# 28#) s28 of
                                                                                                                    (# s29, m29 #) -> case readInt8Array# a ((i *# 64#) +# 29#) s29 of
                                                                                                                        (# s30, m30 #) -> case readInt8Array# a ((i *# 64#) +# 30#) s30 of
                                                                                                                            (# s31, m31 #) -> case readInt8Array# a ((i *# 64#) +# 31#) s31 of
                                                                                                                                (# s32, m32 #) -> case readInt8Array# a ((i *# 64#) +# 32#) s32 of
                                                                                                                                    (# s33, m33 #) -> case readInt8Array# a ((i *# 64#) +# 33#) s33 of
                                                                                                                                        (# s34, m34 #) -> case readInt8Array# a ((i *# 64#) +# 34#) s34 of
                                                                                                                                            (# s35, m35 #) -> case readInt8Array# a ((i *# 64#) +# 35#) s35 of
                                                                                                                                                (# s36, m36 #) -> case readInt8Array# a ((i *# 64#) +# 36#) s36 of
                                                                                                                                                    (# s37, m37 #) -> case readInt8Array# a ((i *# 64#) +# 37#) s37 of
                                                                                                                                                        (# s38, m38 #) -> case readInt8Array# a ((i *# 64#) +# 38#) s38 of
                                                                                                                                                            (# s39, m39 #) -> case readInt8Array# a ((i *# 64#) +# 39#) s39 of
                                                                                                                                                                (# s40, m40 #) -> case readInt8Array# a ((i *# 64#) +# 40#) s40 of
                                                                                                                                                                    (# s41, m41 #) -> case readInt8Array# a ((i *# 64#) +# 41#) s41 of
                                                                                                                                                                        (# s42, m42 #) -> case readInt8Array# a ((i *# 64#) +# 42#) s42 of
                                                                                                                                                                            (# s43, m43 #) -> case readInt8Array# a ((i *# 64#) +# 43#) s43 of
                                                                                                                                                                                (# s44, m44 #) -> case readInt8Array# a ((i *# 64#) +# 44#) s44 of
                                                                                                                                                                                    (# s45, m45 #) -> case readInt8Array# a ((i *# 64#) +# 45#) s45 of
                                                                                                                                                                                        (# s46, m46 #) -> case readInt8Array# a ((i *# 64#) +# 46#) s46 of
                                                                                                                                                                                            (# s47, m47 #) -> case readInt8Array# a ((i *# 64#) +# 47#) s47 of
                                                                                                                                                                                                (# s48, m48 #) -> case readInt8Array# a ((i *# 64#) +# 48#) s48 of
                                                                                                                                                                                                    (# s49, m49 #) -> case readInt8Array# a ((i *# 64#) +# 49#) s49 of
                                                                                                                                                                                                        (# s50, m50 #) -> case readInt8Array# a ((i *# 64#) +# 50#) s50 of
                                                                                                                                                                                                            (# s51, m51 #) -> case readInt8Array# a ((i *# 64#) +# 51#) s51 of
                                                                                                                                                                                                                (# s52, m52 #) -> case readInt8Array# a ((i *# 64#) +# 52#) s52 of
                                                                                                                                                                                                                    (# s53, m53 #) -> case readInt8Array# a ((i *# 64#) +# 53#) s53 of
                                                                                                                                                                                                                        (# s54, m54 #) -> case readInt8Array# a ((i *# 64#) +# 54#) s54 of
                                                                                                                                                                                                                            (# s55, m55 #) -> case readInt8Array# a ((i *# 64#) +# 55#) s55 of
                                                                                                                                                                                                                                (# s56, m56 #) -> case readInt8Array# a ((i *# 64#) +# 56#) s56 of
                                                                                                                                                                                                                                    (# s57, m57 #) -> case readInt8Array# a ((i *# 64#) +# 57#) s57 of
                                                                                                                                                                                                                                        (# s58, m58 #) -> case readInt8Array# a ((i *# 64#) +# 58#) s58 of
                                                                                                                                                                                                                                            (# s59, m59 #) -> case readInt8Array# a ((i *# 64#) +# 59#) s59 of
                                                                                                                                                                                                                                                (# s60, m60 #) -> case readInt8Array# a ((i *# 64#) +# 60#) s60 of
                                                                                                                                                                                                                                                    (# s61, m61 #) -> case readInt8Array# a ((i *# 64#) +# 61#) s61 of
                                                                                                                                                                                                                                                        (# s62, m62 #) -> case readInt8Array# a ((i *# 64#) +# 62#) s62 of
                                                                                                                                                                                                                                                            (# s63, m63 #) -> case readInt8Array# a ((i *# 64#) +# 63#) s63 of
                                                                                                                                                                                                                                                                (# s64, m64 #) -> (# s64, Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64 #))

{-# INLINE writeInt8X64Array #-}
-- | Write a vector to specified index of mutable array.
writeInt8X64Array :: PrimMonad m => MutableByteArray (PrimState m) -> Int -> Int8X64 -> m ()
writeInt8X64Array (MutableByteArray a) (I# i) (Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64) = primitive_ (writeInt8Array# a ((i *# 64#) +# 0#) m1) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 1#) m2) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 2#) m3) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 3#) m4) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 4#) m5) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 5#) m6) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 6#) m7) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 7#) m8) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 8#) m9) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 9#) m10) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 10#) m11) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 11#) m12) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 12#) m13) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 13#) m14) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 14#) m15) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 15#) m16) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 16#) m17) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 17#) m18) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 18#) m19) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 19#) m20) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 20#) m21) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 21#) m22) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 22#) m23) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 23#) m24) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 24#) m25) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 25#) m26) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 26#) m27) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 27#) m28) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 28#) m29) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 29#) m30) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 30#) m31) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 31#) m32) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 32#) m33) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 33#) m34) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 34#) m35) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 35#) m36) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 36#) m37) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 37#) m38) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 38#) m39) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 39#) m40) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 40#) m41) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 41#) m42) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 42#) m43) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 43#) m44) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 44#) m45) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 45#) m46) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 46#) m47) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 47#) m48) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 48#) m49) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 49#) m50) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 50#) m51) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 51#) m52) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 52#) m53) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 53#) m54) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 54#) m55) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 55#) m56) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 56#) m57) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 57#) m58) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 58#) m59) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 59#) m60) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 60#) m61) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 61#) m62) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 62#) m63) >> primitive_ (writeInt8Array# a ((i *# 64#) +# 63#) m64)

{-# INLINE indexInt8X64OffAddr #-}
-- | Reads vector from the specified index of the address.
indexInt8X64OffAddr :: Addr -> Int -> Int8X64
indexInt8X64OffAddr (Addr a) (I# i) = Int8X64 (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 0#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 1#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 2#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 3#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 4#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 5#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 6#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 7#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 8#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 9#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 10#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 11#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 12#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 13#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 14#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 15#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 16#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 17#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 18#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 19#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 20#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 21#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 22#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 23#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 24#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 25#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 26#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 27#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 28#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 29#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 30#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 31#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 32#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 33#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 34#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 35#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 36#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 37#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 38#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 39#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 40#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 41#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 42#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 43#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 44#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 45#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 46#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 47#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 48#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 49#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 50#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 51#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 52#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 53#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 54#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 55#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 56#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 57#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 58#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 59#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 60#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 61#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 62#)) 0#) (indexInt8OffAddr# (plusAddr# a ((i *# 64#) +# 63#)) 0#)

{-# INLINE readInt8X64OffAddr #-}
-- | Reads vector from the specified index of the address.
readInt8X64OffAddr :: PrimMonad m => Addr -> Int -> m Int8X64
readInt8X64OffAddr (Addr a) (I# i) = primitive (\ s0 -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 0#) s0 of
    (# s1, m1 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 1#) s1 of
        (# s2, m2 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 2#) s2 of
            (# s3, m3 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 3#) s3 of
                (# s4, m4 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 4#) s4 of
                    (# s5, m5 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 5#) s5 of
                        (# s6, m6 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 6#) s6 of
                            (# s7, m7 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 7#) s7 of
                                (# s8, m8 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 8#) s8 of
                                    (# s9, m9 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 9#) s9 of
                                        (# s10, m10 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 10#) s10 of
                                            (# s11, m11 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 11#) s11 of
                                                (# s12, m12 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 12#) s12 of
                                                    (# s13, m13 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 13#) s13 of
                                                        (# s14, m14 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 14#) s14 of
                                                            (# s15, m15 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 15#) s15 of
                                                                (# s16, m16 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 16#) s16 of
                                                                    (# s17, m17 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 17#) s17 of
                                                                        (# s18, m18 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 18#) s18 of
                                                                            (# s19, m19 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 19#) s19 of
                                                                                (# s20, m20 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 20#) s20 of
                                                                                    (# s21, m21 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 21#) s21 of
                                                                                        (# s22, m22 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 22#) s22 of
                                                                                            (# s23, m23 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 23#) s23 of
                                                                                                (# s24, m24 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 24#) s24 of
                                                                                                    (# s25, m25 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 25#) s25 of
                                                                                                        (# s26, m26 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 26#) s26 of
                                                                                                            (# s27, m27 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 27#) s27 of
                                                                                                                (# s28, m28 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 28#) s28 of
                                                                                                                    (# s29, m29 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 29#) s29 of
                                                                                                                        (# s30, m30 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 30#) s30 of
                                                                                                                            (# s31, m31 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 31#) s31 of
                                                                                                                                (# s32, m32 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 32#) s32 of
                                                                                                                                    (# s33, m33 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 33#) s33 of
                                                                                                                                        (# s34, m34 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 34#) s34 of
                                                                                                                                            (# s35, m35 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 35#) s35 of
                                                                                                                                                (# s36, m36 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 36#) s36 of
                                                                                                                                                    (# s37, m37 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 37#) s37 of
                                                                                                                                                        (# s38, m38 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 38#) s38 of
                                                                                                                                                            (# s39, m39 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 39#) s39 of
                                                                                                                                                                (# s40, m40 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 40#) s40 of
                                                                                                                                                                    (# s41, m41 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 41#) s41 of
                                                                                                                                                                        (# s42, m42 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 42#) s42 of
                                                                                                                                                                            (# s43, m43 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 43#) s43 of
                                                                                                                                                                                (# s44, m44 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 44#) s44 of
                                                                                                                                                                                    (# s45, m45 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 45#) s45 of
                                                                                                                                                                                        (# s46, m46 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 46#) s46 of
                                                                                                                                                                                            (# s47, m47 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 47#) s47 of
                                                                                                                                                                                                (# s48, m48 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 48#) s48 of
                                                                                                                                                                                                    (# s49, m49 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 49#) s49 of
                                                                                                                                                                                                        (# s50, m50 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 50#) s50 of
                                                                                                                                                                                                            (# s51, m51 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 51#) s51 of
                                                                                                                                                                                                                (# s52, m52 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 52#) s52 of
                                                                                                                                                                                                                    (# s53, m53 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 53#) s53 of
                                                                                                                                                                                                                        (# s54, m54 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 54#) s54 of
                                                                                                                                                                                                                            (# s55, m55 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 55#) s55 of
                                                                                                                                                                                                                                (# s56, m56 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 56#) s56 of
                                                                                                                                                                                                                                    (# s57, m57 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 57#) s57 of
                                                                                                                                                                                                                                        (# s58, m58 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 58#) s58 of
                                                                                                                                                                                                                                            (# s59, m59 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 59#) s59 of
                                                                                                                                                                                                                                                (# s60, m60 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 60#) s60 of
                                                                                                                                                                                                                                                    (# s61, m61 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 61#) s61 of
                                                                                                                                                                                                                                                        (# s62, m62 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 62#) s62 of
                                                                                                                                                                                                                                                            (# s63, m63 #) -> case (\ addr i' -> readInt8OffAddr# (plusAddr# addr i') 0#) a ((i *# 64#) +# 63#) s63 of
                                                                                                                                                                                                                                                                (# s64, m64 #) -> (# s64, Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64 #))

{-# INLINE writeInt8X64OffAddr #-}
-- | Write vector to the specified index of the address.
writeInt8X64OffAddr :: PrimMonad m => Addr -> Int -> Int8X64 -> m ()
writeInt8X64OffAddr (Addr a) (I# i) (Int8X64 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15 m16 m17 m18 m19 m20 m21 m22 m23 m24 m25 m26 m27 m28 m29 m30 m31 m32 m33 m34 m35 m36 m37 m38 m39 m40 m41 m42 m43 m44 m45 m46 m47 m48 m49 m50 m51 m52 m53 m54 m55 m56 m57 m58 m59 m60 m61 m62 m63 m64) = primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 0#)) 0# m1) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 1#)) 0# m2) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 2#)) 0# m3) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 3#)) 0# m4) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 4#)) 0# m5) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 5#)) 0# m6) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 6#)) 0# m7) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 7#)) 0# m8) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 8#)) 0# m9) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 9#)) 0# m10) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 10#)) 0# m11) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 11#)) 0# m12) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 12#)) 0# m13) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 13#)) 0# m14) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 14#)) 0# m15) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 15#)) 0# m16) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 16#)) 0# m17) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 17#)) 0# m18) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 18#)) 0# m19) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 19#)) 0# m20) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 20#)) 0# m21) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 21#)) 0# m22) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 22#)) 0# m23) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 23#)) 0# m24) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 24#)) 0# m25) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 25#)) 0# m26) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 26#)) 0# m27) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 27#)) 0# m28) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 28#)) 0# m29) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 29#)) 0# m30) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 30#)) 0# m31) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 31#)) 0# m32) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 32#)) 0# m33) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 33#)) 0# m34) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 34#)) 0# m35) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 35#)) 0# m36) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 36#)) 0# m37) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 37#)) 0# m38) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 38#)) 0# m39) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 39#)) 0# m40) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 40#)) 0# m41) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 41#)) 0# m42) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 42#)) 0# m43) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 43#)) 0# m44) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 44#)) 0# m45) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 45#)) 0# m46) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 46#)) 0# m47) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 47#)) 0# m48) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 48#)) 0# m49) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 49#)) 0# m50) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 50#)) 0# m51) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 51#)) 0# m52) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 52#)) 0# m53) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 53#)) 0# m54) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 54#)) 0# m55) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 55#)) 0# m56) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 56#)) 0# m57) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 57#)) 0# m58) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 58#)) 0# m59) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 59#)) 0# m60) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 60#)) 0# m61) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 61#)) 0# m62) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 62#)) 0# m63) >> primitive_ (writeInt8OffAddr# (plusAddr# a ((i *# 64#) +# 63#)) 0# m64)


